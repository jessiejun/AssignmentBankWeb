{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset134 STHeitiSC-Light;}
{\colortbl;\red255\green255\blue255;\red110\green156\blue190;\red43\green43\blue43;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf2 \cb3 <!DOCTYPE html>\
<head>\
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />\
<title>jquery+html5
\f1 \'b1\'fd\'d0\'ce\'cd\'bc\'cc\'d8\'d0\'a7
\f0 </title>\
<style>\
body\{background: #fff;color: #333;font-family: "Trebuchet MS", Verdana, Arial, Helvetica, sans-serif;font-size: 0.9em;padding: 40px;\}\
.wideBox\{clear: both;text-align: center;margin-bottom: 50px;padding: 10px;background: #ebedf2;border: 1px solid #333;line-height: 80%;\}\
#container\{width: 900px;margin: 0 auto;\}\
#chart, #chartData\{border: 1px solid #333;background: #ebedf2 url(http://www.codefans.net/jscss/demoimg/201311/gradient.png) repeat-x 0 0;\}\
#chart\{display: block;margin: 0 0 50px 0;float: left;cursor: pointer;\}\
#chartData\{width: 200px;margin: 0 40px 0 0;float: right;border-collapse: collapse;box-shadow: 0 0 1em rgba(0, 0, 0, 0.5);-moz-box-shadow: 0 0 1em rgba(0, 0, 0, 0.5);-webkit-box-shadow: 0 0 1em rgba(0, 0, 0, 0.5);background-position: 0 -100px;\}\
#chartData th, #chartData td\{padding: 0.5em;border: 1px dotted #666;text-align: left;\}\
#chartData th\{border-bottom: 2px solid #333;text-transform: uppercase;\}\
#chartData td\{cursor: pointer;\}\
#chartData td.highlight\{background: #e8e8e8;\}\
#chartData tr: hover td\{background: #f0f0f0;\}\
</style>\
<script src="http://www.codefans.net/ajaxjs/jquery-1.6.2.min.js"></script>\
<!--[if IE]>\
<script src="http://explorercanvas.googlecode.com/svn/trunk/excanvas.js"></script>\
<![endif]-->\
<script>\
$( pieChart );\
function pieChart() \{\
  var chartSizePercent = 55;                        // The chart radius relative to the canvas width/height (in percent)\
  var sliceBorderWidth = 1;                         // Width (in pixels) of the border around each slice\
  var sliceBorderStyle = "#fff";                    // Colour of the border around each slice\
  var sliceGradientColour = "#ddd";                 // Colour to use for one end of the chart gradient\
  var maxPullOutDistance = 25;                      // How far, in pixels, to pull slices out when clicked\
  var pullOutFrameStep = 4;                         // How many pixels to move a slice with each animation frame\
  var pullOutFrameInterval = 40;                    // How long (in ms) between each animation frame\
  var pullOutLabelPadding = 65;                     // Padding between pulled-out slice and its label  \
  var pullOutLabelFont = "bold 16px 'Trebuchet MS', Verdana, sans-serif";  // Pull-out slice label font\
  var pullOutValueFont = "bold 12px 'Trebuchet MS', Verdana, sans-serif";  // Pull-out slice value font\
  var pullOutValuePrefix = "$";                     // Pull-out slice value prefix\
  var pullOutShadowColour = "rgba( 0, 0, 0, .5 )";  // Colour to use for the pull-out slice shadow\
  var pullOutShadowOffsetX = 5;                     // X-offset (in pixels) of the pull-out slice shadow\
  var pullOutShadowOffsetY = 5;                     // Y-offset (in pixels) of the pull-out slice shadow\
  var pullOutShadowBlur = 5;                        // How much to blur the pull-out slice shadow\
  var pullOutBorderWidth = 2;                       // Width (in pixels) of the pull-out slice border\
  var pullOutBorderStyle = "#333";                  // Colour of the pull-out slice border\
  var chartStartAngle = -.5 * Math.PI;              // Start the chart at 12 o'clock instead of 3 o'clock\
  var canvas;                       // The canvas element in the page\
  var currentPullOutSlice = -1;     // The slice currently pulled out (-1 = no slice)\
  var currentPullOutDistance = 0;   // How many pixels the pulled-out slice is currently pulled out in the animation\
  var animationId = 0;              // Tracks the interval ID for the animation created by setInterval()\
  var chartData = [];               // Chart data (labels, values, and angles)\
  var chartColours = [];            // Chart colours (pulled from the HTML table)\
  var totalValue = 0;               // Total of all the values in the chart\
  var canvasWidth;                  // Width of the canvas, in pixels\
  var canvasHeight;                 // Height of the canvas, in pixels\
  var centreX;                      // X-coordinate of centre of the canvas/chart\
  var centreY;                      // Y-coordinate of centre of the canvas/chart\
  var chartRadius;                  // Radius of the pie chart, in pixels\
  init();\
  function init() \{\
    canvas = document.getElementById('chart');\
    if ( typeof canvas.getContext === 'undefined' ) return;\
    canvasWidth = canvas.width;\
    canvasHeight = canvas.height;\
    centreX = canvasWidth / 2;\
    centreY = canvasHeight / 2;\
    chartRadius = Math.min( canvasWidth, canvasHeight ) / 2 * ( chartSizePercent / 100 );\
    var currentRow = -1;\
    var currentCell = 0;\
    $('#chartData td').each( function() \{\
      currentCell++;\
      if ( currentCell % 2 != 0 ) \{\
        currentRow++;\
        chartData[currentRow] = [];\
        chartData[currentRow]['label'] = $(this).text();\
      \} else \{\
       var value = parseFloat($(this).text());\
       totalValue += value;\
       value = value.toFixed(2);\
       chartData[currentRow]['value'] = value;\
      \}\
      $(this).data( 'slice', currentRow );\
      $(this).click( handleTableClick );\
      if ( rgb = $(this).css('color').match( /rgb\\((\\d+), (\\d+), (\\d+)/) ) \{\
        chartColours[currentRow] = [ rgb[1], rgb[2], rgb[3] ];\
      \} else if ( hex = $(this).css('color').match(/#([a-fA-F0-9]\{2\})([a-fA-F0-9]\{2\})([a-fA-F0-9]\{2\})/) ) \{\
        chartColours[currentRow] = [ parseInt(hex[1],16) ,parseInt(hex[2],16), parseInt(hex[3], 16) ];\
      \} else \{\
        alert( "Error: Colour could not be determined! Please specify table colours using the format '#xxxxxx'" );\
        return;\
      \}\
    \} );\
    var currentPos = 0; // The current position of the slice in the pie (from 0 to 1)\
    for ( var slice in chartData ) \{\
      chartData[slice]['startAngle'] = 2 * Math.PI * currentPos;\
      chartData[slice]['endAngle'] = 2 * Math.PI * ( currentPos + ( chartData[slice]['value'] / totalValue ) );\
      currentPos += chartData[slice]['value'] / totalValue;\
    \}\
    drawChart();\
    $('#chart').click ( handleChartClick );\
  \}\
  function handleChartClick ( clickEvent ) \{\
    // Get the mouse cursor position at the time of the click, relative to the canvas\
    var mouseX = clickEvent.pageX - this.offsetLeft;\
    var mouseY = clickEvent.pageY - this.offsetTop;\
    // Was the click inside the pie chart?\
    var xFromCentre = mouseX - centreX;\
    var yFromCentre = mouseY - centreY;\
    var distanceFromCentre = Math.sqrt( Math.pow( Math.abs( xFromCentre ), 2 ) + Math.pow( Math.abs( yFromCentre ),2 ) );\
    if ( distanceFromCentre <= chartRadius ) \{\
      var clickAngle = Math.atan2( yFromCentre, xFromCentre ) - chartStartAngle;\
      if ( clickAngle < 0 ) clickAngle = 2 * Math.PI + clickAngle;\
      for ( var slice in chartData ) \{\
        if ( clickAngle >= chartData[slice]['startAngle'] && clickAngle <= chartData[slice]['endAngle'] ) \{\
          // Slice found. Pull it out or push it in, as required.\
          toggleSlice ( slice );\
          return;\
        \}\
      \}\
    \}\
    // User must have clicked outside the pie. Push any pulled-out slice back in.\
    pushIn();\
  \}\
  function handleTableClick ( clickEvent ) \{\
    var slice = $(this).data('slice');\
    toggleSlice ( slice );\
  \}\
  function toggleSlice ( slice ) \{\
    if ( slice == currentPullOutSlice ) \{\
      pushIn();\
    \} else \{\
      startPullOut ( slice );\
    \}\
  \}\
  function startPullOut ( slice ) \{\
    if ( currentPullOutSlice == slice ) return;\
    currentPullOutSlice = slice;\
    currentPullOutDistance = 0;\
    clearInterval( animationId );\
    animationId = setInterval( function() \{ animatePullOut( slice ); \}, pullOutFrameInterval );\
    $('#chartData td').removeClass('highlight');\
    var labelCell = $('#chartData td:eq(' + (slice*2) + ')');\
    var valueCell = $('#chartData td:eq(' + (slice*2+1) + ')');\
    labelCell.addClass('highlight');\
    valueCell.addClass('highlight');\
  \}\
  function animatePullOut ( slice ) \{\
    currentPullOutDistance += pullOutFrameStep;\
    if ( currentPullOutDistance >= maxPullOutDistance ) \{\
      clearInterval( animationId );\
      return;\
    \}\
    drawChart();\
  \}\
  function pushIn() \{\
    currentPullOutSlice = -1;\
    currentPullOutDistance = 0;\
    clearInterval( animationId );\
    drawChart();\
    $('#chartData td').removeClass('highlight');\
  \}\
  function drawChart() \{\
    var context = canvas.getContext('2d');\
    context.clearRect ( 0, 0, canvasWidth, canvasHeight );\
    for ( var slice in chartData ) \{\
      if ( slice != currentPullOutSlice ) drawSlice( context, slice );\
    \}\
    if ( currentPullOutSlice != -1 ) drawSlice( context, currentPullOutSlice );\
  \}\
  function drawSlice ( context, slice ) \{\
    var startAngle = chartData[slice]['startAngle']  + chartStartAngle;\
    var endAngle = chartData[slice]['endAngle']  + chartStartAngle;\
      \
    if ( slice == currentPullOutSlice ) \{\
      var midAngle = (startAngle + endAngle) / 2;\
      var actualPullOutDistance = currentPullOutDistance * easeOut( currentPullOutDistance/maxPullOutDistance, .8 );\
      startX = centreX + Math.cos(midAngle) * actualPullOutDistance;\
      startY = centreY + Math.sin(midAngle) * actualPullOutDistance;\
      context.fillStyle = 'rgb(' + chartColours[slice].join(',') + ')';\
      context.textAlign = "center";\
      context.font = pullOutLabelFont;\
      context.fillText( chartData[slice]['label'], centreX + Math.cos(midAngle) * ( chartRadius + maxPullOutDistance + pullOutLabelPadding ), centreY + Math.sin(midAngle) * ( chartRadius + maxPullOutDistance + pullOutLabelPadding ) );\
      context.font = pullOutValueFont;\
      context.fillText( pullOutValuePrefix + chartData[slice]['value'] + " (" + ( parseInt( chartData[slice]['value'] / totalValue * 100 + .5 ) ) +  "%)", centreX + Math.cos(midAngle) * ( chartRadius + maxPullOutDistance + pullOutLabelPadding ), centreY + Math.sin(midAngle) * ( chartRadius + maxPullOutDistance + pullOutLabelPadding ) + 20 );\
      context.shadowOffsetX = pullOutShadowOffsetX;\
      context.shadowOffsetY = pullOutShadowOffsetY;\
      context.shadowBlur = pullOutShadowBlur;\
    \} else \{\
      startX = centreX;\
      startY = centreY;\
    \}\
    var sliceGradient = context.createLinearGradient( 0, 0, canvasWidth*.75, canvasHeight*.75 );\
    sliceGradient.addColorStop( 0, sliceGradientColour );\
    sliceGradient.addColorStop( 1, 'rgb(' + chartColours[slice].join(',') + ')' );\
    context.beginPath();\
    context.moveTo( startX, startY );\
    context.arc( startX, startY, chartRadius, startAngle, endAngle, false );\
    context.lineTo( startX, startY );\
    context.closePath();\
    context.fillStyle = sliceGradient;\
    context.shadowColor = ( slice == currentPullOutSlice ) ? pullOutShadowColour : "rgba( 0, 0, 0, 0 )";\
    context.fill();\
    context.shadowColor = "rgba( 0, 0, 0, 0 )";\
    if ( slice == currentPullOutSlice ) \{\
      context.lineWidth = pullOutBorderWidth;\
      context.strokeStyle = pullOutBorderStyle;\
    \} else \{\
      context.lineWidth = sliceBorderWidth;\
      context.strokeStyle = sliceBorderStyle;\
    \}\
    context.stroke();\
  \}\
  function easeOut( ratio, power ) \{\
    return ( Math.pow ( 1 - ratio, power ) + 1 );\
  \}\
\};\
</script>\
</head>\
<body>\
<div id="container">\
  <div class="wideBox">\
    <h1>Widgets Sold in 2010</h1>\
  </div>\
  <canvas id="chart" width="600" height="500"></canvas>\
  <table id="chartData">\
    <tr>\
      <th>Widget</th><th>Sales ($)</th>\
     </tr>\
    <tr style="color: #0DA068">\
      <td>SuperWidget</td><td>1862.12</td>\
    </tr>\
    <tr style="color: #194E9C">\
      <td>MegaWidget</td><td>1316.00</td>\
    </tr>\
    <tr style="color: #ED9C13">\
      <td>HyperWidget</td><td>712.49</td>\
    </tr>\
    <tr style="color: #ED5713">\
      <td>WonderWidget</td><td>3236.27</td>\
    </tr>\
    <tr style="color: #057249">\
      <td>MicroWidget</td><td>6122.06</td>\
    </tr>\
    <tr style="color: #5F91DC">\
      <td>NanoWidget</td><td>128.11</td>\
    </tr>\
    <tr style="color: #F88E5D">\
      <td>LovelyWidget</td><td>245.55</td>\
    </tr>\
  </table>\
</div>\
</body>\
</html>}